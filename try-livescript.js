// Generated by LiveScript 1.3.0
(function(){
  var toString$ = {}.toString;
  $(function(){
    var ref$, run, compile, any, map, foldl, first, breakList, each, unique, history, autocompleteHistory, lsc, preScript, noHistory, commandHandled, allPaths, $currentSection, currentPath, switchSection, getNextPath, getPrevPath, switchNextSection, switchPrevSection, $pres;
    ref$ = require('LiveScript'), run = ref$.run, compile = ref$.compile;
    ref$ = require('prelude-ls'), any = ref$.any, map = ref$.map, foldl = ref$.foldl, first = ref$.first, breakList = ref$.breakList, each = ref$.each, unique = ref$.unique;
    history = [];
    autocompleteHistory = [];
    lsc = $('#ls-console');
    window.lscConsole = lsc.console({
      promptLabel: '> ',
      commandValidate: function(line){
        return line !== '';
      },
      commandHandle: function(line){
        var trimmedLine, lines, compiled, autocompleteList, re, m, word, evaluated, result, className, resultType, ex;
        trimmedLine = line.trim();
        if ('next!' === trimmedLine) {
          return switchNextSection();
        }
        if ('prev!' === trimmedLine || 'back!' === trimmedLine) {
          return switchPrevSection();
        }
        try {
          lines = (history.concat([preScript])).reduce(function(acc, a){
            return acc + "\n_ = " + a;
          }, "");
          line = line.trim();
          compiled = compile("<- (do)\n" + lines + "\n" + line, {
            bare: true
          });
          autocompleteList = [];
          re = /([\w\-\d]+)\s*=[^=]/ig;
          while ((m = re.exec(compiled)) !== null) {
            word = foldl(fn$, '')(
            m[1].split(''));
            autocompleteList.push(word);
          }
          autocompleteHistory = unique(autocompleteList);
          evaluated = eval(compiled);
          result = evaluated;
          if (result === undefined) {
            return "";
          }
          if ("1.1.1" === result.VERSION) {
            result = "{prelude}";
            className = 'type';
          } else {
            resultType = toString$.call(result).slice(8, -1);
            if (any((function(it){
              return resultType === it;
            }))(
            ['Array', 'Object', 'Number', 'String', 'Boolean'])) {
              className = 'value';
              re = /function.*\((.*)\).*/i;
              result = JSON.stringify(result, function(k, v){
                var ref$, _, args;
                if ('Function' === toString$.call(v).slice(8, -1)) {
                  className = 'type';
                  if ((ref$ = re.exec(v.toString())) != null) {
                    _ = ref$[0], args = ref$[1];
                  }
                  return "(" + args.trim() + ") -> ...";
                }
                return v;
              });
            } else {
              result = result.toString();
              if (result.indexOf("_curry.call(context, params) : f.apply(context, params);") > -1) {
                result = "";
              }
              className = 'type';
            }
          }
          if (!noHistory) {
            if (!!preScript) {
              history.push(preScript);
            }
            if ('Function' !== toString$.call(evaluated != null ? evaluated.then : void 8).slice(8, -1)) {
              history.push(line);
            }
          }
        } catch (e$) {
          ex = e$;
          result = ex.message;
          className = 'error';
        }
        commandHandled();
        return [{
          msg: result,
          className: "jquery-console-message-" + className
        }];
        function fn$(acc, a){
          if (acc.length > 0 && a.toUpperCase() === a) {
            return acc + "-" + a.toLowerCase();
          }
          return acc + a;
        }
      },
      completeHandle: function(line){
        var autocompleteList;
        autocompleteList = ['next!', 'back!'].concat(autocompleteHistory);
        return autocompleteList.filter(function(it){
          return it.lastIndexOf(line) === 0;
        }).map(function(it){
          return it.substring(line.length);
        });
      },
      autofocus: true,
      animateScroll: true,
      promptHistory: true,
      fadeOnReset: false
    });
    window.lscReset = function(){
      history = [];
      return lscConsole.reset();
    };
    preScript = null;
    noHistory = false;
    window.promptText = function(xPre, xNoHistory, s){
      if (!!xPre) {
        preScript = xPre;
      }
      noHistory = xNoHistory;
      return lscConsole.promptText(s);
    };
    commandHandled = function(){
      preScript = null;
      return noHistory = false;
    };
    $('.prompt').each(function(){
      return $(this).click(function(){
        var isPre, $me, xPre, xNoHistory;
        isPre = 'PRE' === this.tagName;
        $me = $(this);
        xPre = $me.attr('x-pre');
        xNoHistory = 'String' === toString$.call($me.attr('x-no-history')).slice(8, -1);
        promptText(xPre, xNoHistory, (isPre && 'String' !== toString$.call($me.attr('x-no-linefeed')).slice(8, -1) ? "\n" : "") + $me.text());
        return lscConsole.focus();
      });
    });
    allPaths = function(){
      return first(foldl(function(arg$, a){
        var acc, skip, skipNext;
        acc = arg$[0], skip = arg$[1];
        skipNext = a.indexOf('/') === -1;
        if (!skip) {
          return [acc.concat([a]), skipNext];
        }
        return [acc, skipNext];
      }, [[], false])(
      $('section[x-path]').map(function(){
        return $(this).attr('x-path');
      }).toArray()));
    }();
    $currentSection = null;
    currentPath = null;
    switchSection = function(path){
      var $newSection, nextPath, prevPath, $nextSection, $prevSection;
      if (!path || !path.length) {
        return;
      }
      lscReset();
      $newSection = path.indexOf('/') > -1
        ? $("section[x-path='" + path + "']")
        : $("section[x-path='" + path + "'] > section:first");
      each(function(it){
        return history.push(it);
      })(
      $newSection.find('meta[name=x-pre]').map(function(){
        return $(this).attr('value');
      }).toArray());
      if (!!$currentSection) {
        $currentSection.hide();
      }
      if (!!$currentSection) {
        $currentSection.parent().hide();
      }
      $newSection.parent().show();
      $newSection.show();
      $currentSection = $newSection;
      currentPath = path;
      nextPath = getNextPath();
      prevPath = getPrevPath();
      $nextSection = $("section[x-path='" + nextPath + "']");
      $prevSection = $("section[x-path='" + prevPath + "']");
      return each(function(arg$){
        var path, title, $a;
        path = arg$[0], title = arg$[1], $a = arg$[2];
        if (!!path) {
          $a.css('visibility', 'visible');
          $a.attr('href', '#' + path);
          return $a.find('span').text(title);
        } else {
          return $a.css('visibility', 'hidden');
        }
      })(
      [[prevPath, $prevSection.find('h3:first').text(), $('.prev-step')], [nextPath, $nextSection.find('h3:first').text(), $('.next-step')]]);
    };
    window.addEventListener('hashchange', function(){
      return switchSection(window.location.hash.substr(1));
    });
    getNextPath = function(){
      var ref$, _, ref1$, nextPath;
      ref$ = breakList((function(it){
        return it === currentPath;
      }))(
      allPaths), _ = ref$[0], ref1$ = ref$[1], _ = ref1$[0], nextPath = ref1$[1];
      return nextPath;
    };
    getPrevPath = function(){
      var ref$, ref1$, prevPath, _;
      ref$ = breakList((function(it){
        return it === currentPath;
      }))(
      allPaths), ref1$ = ref$[0], prevPath = ref1$[ref1$.length - 1], _ = ref$[1];
      return prevPath;
    };
    switchNextSection = function(){
      var nextPath;
      nextPath = getNextPath();
      if (!!nextPath) {
        return window.location.hash = nextPath;
      }
      return [{
        msg: "Out of bounds",
        className: "jquery-console-message-error"
      }];
    };
    switchPrevSection = function(){
      var prevPath;
      prevPath = getPrevPath();
      if (!!prevPath) {
        return window.location.hash = prevPath;
      }
      return [{
        msg: "Out of bounds",
        className: "jquery-console-message-error"
      }];
    };
    $pres = $('pre').each(function(){
      var $pre, lines, ws, ref$;
      $pre = $(this);
      lines = $pre.text().split('\n');
      ws = (ref$ = /^\s+/.exec(lines[0])) != null ? ref$[0] : void 8;
      if (!!ws) {
        lines = lines.map(function(it){
          return it.replace(ws, '');
        });
        return $pre.text(lines.join('\n').trim());
      }
    });
    return switchSection(window.location.hash.substr(1) || 'welcome');
  });
}).call(this);
